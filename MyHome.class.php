<?php

/**
 * This class contains hook handlers used to modify and store edit information
 * used by Special:WikiActivity
 */

class MyHome {

	// prefix for our custom data stored in rc_params
	const CUSTOM_DATA_PREFIX = "\x7f\x7f";

	// name of section edited
	private static $editedSectionName = false;
	private static $additionalRcDataBlacklist = [
		'flags'
	];

	/**
	 * Store custom data in rc_params field as JSON encoded table prefixed with extra string.
	 * To pass in extra key-value pairs, pass in 'data' as an associative array.
	 *
	 * @see http://www.mediawiki.org/wiki/Logging_table#log_params
	 *
	 * @author Maciej Brencz <macbre@wikia-inc.com>
	 */
	public static function storeInRecentChanges(RecentChange $rc, $data = array()) {
		// TODO / FIXME: this is a garbage approach to this stuff.
		#/* @var $wgParser Parser */
		#global $wgParser;
		#
		#// If we have existing data packed into rc_params, make sure it is preserved.
		#if(isset($rc->mAttribs['rc_params'])){
		#	$unpackedData = self::unpackData($rc->mAttribs['rc_params']);
		#	if(is_array($unpackedData)){
		#		foreach($unpackedData as $key=>$val){
		#			// Give preference to the data array that was passed into the function.
		#			if(!isset($data[$key])){
		#				$data[$key] = $val;
		#			}
		#		}
		#	}
		#}
		#
		#// summary generated by MW: store auto-summary type
		#if (Wikia::isVarSet('AutoSummaryType')) {
		#	$data['autosummaryType'] = Wikia::getVar('AutoSummaryType');
		#}
		#
		#switch($rc->getAttribute('rc_type')) {
		#	// existing article
		#	case RC_EDIT:
		#		// rollback: store ID of the revision rollback is made to
		#		if (Wikia::isVarSet('RollbackedRevId')) {
		#			$data['rollback'] = true;
		#			$data['revId'] = Wikia::getVar('RollbackedRevId');
		#		}
		#
		#		// edit from view mode
		#		if (Wikia::isVarSet('EditFromViewMode')) {
		#			$data['viewMode'] = 1;
		#			if (Wikia::isVarSet('EditFromViewMode') == 'CategorySelect') {
		#				$data['CategorySelect'] = 1;
		#			}
		#		}
		#
		#		// section edit: store section name and modified summary
		#		if (self::$editedSectionName !== false) {
		#			// store section name
		#			$data['sectionName'] = self::$editedSectionName;
		#
		#			// edit summary
		#			$comment = trim($rc->getAttribute('rc_comment'));
		#
		#			// summary has changed - store modified summary
		#			if (!preg_match('#^/\*(.*)\*/$#', $comment)) {
		#				// remove /* Section title */
		#				$comment = preg_replace('#/\*(.*)\*/#', '', $comment);
		#
		#				// remove all wikitext
		#				$comment = trim($wgParser->stripSectionName($comment));
		#
		#				if ($comment != '') {
		#					$data['summary'] = $comment;
		#				}
		#			}
		#		}
		#		break;
		#
		#	// new article
		#	case RC_NEW:
		#		$content = $wgParser->getOutput()->getText();
		#
		#		// remove [edit] section links
		#		$content = preg_replace('#<span class="editsection">(.*)</a>]</span>#', '', $content);
		#
		#		// remove <script> tags (RT #46350)
		#		$content = preg_replace('#<script[^>]+>(.*)<\/script>#', '', $content);
		#
		#		// remove text between tags (RT #141394) and get rid of photo attribution (BugId:23871)
		#		$content = ActivityFeedHelper::filterTextBetweenTags( $content );
		#
		#		// remove HTML tags
		#		$content = trim(strip_tags($content));
		#
		#		// store first 150 characters of parsed content
		#		$data['intro'] = mb_substr($content, 0, 150);
		#		$data['intro'] = strtr($data['intro'], array('&nbsp;' => ' ', '&amp;' => '&'));
		#
		#		break;
		#}
		#
		#//allow to alter $data by other extensions (eg. Article Comments)
		#wfRunHooks('MyHome:BeforeStoreInRC', array(&$rc, &$data));
		#
		#// encode data to be stored in rc_params
		#if (!empty($data)) {
		#	$rc->mAttribs['rc_params'] = self::packData($data);
		#}
		#
		#Wikia::setVar('rc', $rc);
		#Wikia::setVar('rc_data', $data);
		#
		return true;
	}

	/**
	 * Check if it's section edit, then try to get section name
	 *
	 * @see http://www.mediawiki.org/wiki/Manual:Hooks/EditFilter
	 *
	 * @author Maciej Brencz <macbre@wikia-inc.com>
	 */
	public static function getSectionName($editor, $text, $section, &$error) {
		// TODO / FIXME: more bullcrap
		#/* @var $wgParser Parser */
		#global $wgParser;
		#
		#// make sure to properly init this variable
		#self::$editedSectionName = false;
		#
		#// check for section edit
		#if (is_numeric($section)) {
		#	$hasmatch = preg_match( "/^ *([=]{1,6})(.*?)(\\1) *\\n/i", $editor->textbox1, $matches );
		#
		#	if ( $hasmatch and strlen($matches[2]) > 0 ) {
		#		// this will be saved in recentchanges table in MyHome::storeInRecentChanges
		#		self::$editedSectionName = $wgParser->stripSectionName($matches[2]);
		#	}
		#}
		#
		return true;
	}

	/**
	 * Return page user is redirected to when title is not specified in URL
	 *
	 * http://muppet.wikia.com -> http://muppet.wikia.com/wiki/Special:WikiActivity (happens for logged-in only)
	 *
	 * @author Maciej Brencz <macbre@wikia-inc.com>
	 *
	 * NOTE: it is not possible to do this with standard unpatched core MediaWiki, as the InitialQueriesMainPage
	 * hook does not exist. If you want a bare URL to redirect to Special:WikiActivity as described above, you will
	 * have to set that up through your web server configuration, such as via a 302 redirect in Apache's .htaccess
	 * file. That doesn't allow for user preferences, of course.
	 */
	/*
	public static function getInitialMainPage(Title &$title) {
		global $wgUser, $wgTitle, $wgRequest, $wgEnableWikiaHomePageExt;

		// dirty hack to make skin chooser work ($wgTitle is not set at this point yet)
		$wgTitle = Title::newMainPage();

		// do not redirect for skins different then Oasis or logged-in requests driven by RandomWiki (FB#1033)
		if(get_class(RequestContext::getMain()->getSkin()) != 'SkinOasis' || ( $wgUser->isLoggedIn() && $wgRequest->getVal( 'redirect' ) == 'no' ) ) {
			return true;
		}

		//user must be logged in and have redirect enabled;
		//this is not used for Corporate Sites where Wikia Visualization is enabled
		if( $wgUser->isLoggedIn() && empty($wgEnableWikiaHomePageExt) ) {
			$value = $wgUser->getGlobalPreference(UserPreferencesV2::LANDING_PAGE_PROP_NAME);
			switch($value) {
				case UserPreferencesV2::LANDING_PAGE_WIKI_ACTIVITY:
					$title = SpecialPage::getTitleFor('WikiActivity');
					break;
				case UserPreferencesV2::LANDING_PAGE_RECENT_CHANGES:
					$title = SpecialPage::getTitleFor('RecentChanges');
					break;
			}
		}

		return true;
	}
	*/

	/**
	 * Store list of images, videos and categories added to an article
	 */
	public static function getInserts($linksUpdate) {
		// TODO / FIXME: more bullcrap
		#$rc_data = array();
		#
		#// store list of added images and videos
		#$imageInserts = Wikia::getVar('imageInserts');
		#if(!empty($imageInserts)) {
		#	foreach($imageInserts as $one) {
		#		$rc_data['imageInserts'][] = $one['il_to'];
		#	}
		#}
		#
		#// store list of added categories
		#$categoryInserts = Wikia::getVar('categoryInserts');
		#if (!empty($categoryInserts)) {
		#	foreach($categoryInserts as $cat => $page) {
		#		$rc_data['categoryInserts'][] = $cat;
		#	}
		#}
		#
		#// update if necessary
		#if (count($rc_data) > 0) {
		#	self::storeAdditionalRcData($rc_data);
		#}
		#
		return true;
	}

	/**
	 * Given an associative array of data to store, adds this to additional data and updates
	 * the row in recentchanges corresponding to the provided RecentChange (or, if rc is not
	 * provided, then the RecentChange that is stored in Wikia::getVar('rc') will be used);
	 */
	public static function storeAdditionalRcData($additionalData, &$rc = null) {
		$rc_data = Wikia::getVar('rc_data');
		$rc_data = ($rc_data ? $rc_data : array()); // rc_data might not have been set
		$rc_data = array_merge($rc_data, $additionalData); // additionalData overwrites existing keys in rc_data if there are collisions.

		if ( !is_object($rc) ) {
			$rc = Wikia::getVar('rc');
		}
		if ($rc instanceof RecentChange) {
			/* @var $rc RecentChange */
			$rc_id = $rc->getAttribute('rc_id');
			$rc_log_type = $rc->getAttribute('rc_log_type');

			if ( !in_array( $rc_log_type, self::$additionalRcDataBlacklist ) ) {
				$dbw = wfGetDB( DB_MASTER );
				$dbw->update('recentchanges',
					array(
						'rc_params' => MyHome::packData($rc_data)
					),
					array(
						'rc_id' => $rc_id
					),
					__METHOD__
				);
			}
		}

		Wikia::setVar('rc_data', $rc_data);
	}

	/**
	 * Return encoded (serialized/jsonized) data with extra prefix which can be stored in rc_params
	 *
	 * @author Maciej Brencz <macbre@wikia-inc.com>
	 */
	public static function packData($data) {
		$packed = json_encode($data);

		// store encoded data with our custom prefix
		return self::CUSTOM_DATA_PREFIX . $packed;
	}

	/**
	 * Return decoded (unserialized/unjsonized) data stored in rc_params
	 *
	 * @author Maciej Brencz <macbre@wikia-inc.com>
	 */
	public static function unpackData($field) {
		// extra check
		if (!is_string($field) || trim($field) == '') {
			return null;
		}

		// try to get our custom prefix
		$prefix = substr($field, 0, strlen(self::CUSTOM_DATA_PREFIX));

		if ($prefix != self::CUSTOM_DATA_PREFIX) {
			return null;
		}

		// get encoded data
		$field = substr($field, strlen(self::CUSTOM_DATA_PREFIX));

		// and try to unpack it
		try {
			$data = json_decode($field, true);
		}
		catch(Exception $e) {
			$data = null;
		}

		return $data;
	}

	/**
	 * Add "Disable my redirect to My Home" switch to Special:Preferences (Misc tab)
	 *
	 * @author Maciej Brencz <macbre@wikia-inc.com>
	 */
	/*
	public static function onGetPreferences($user, &$preferences) {
		// FIXME / TODO: implemented using wikia-specific stuff; rewrite to use standard prefs?
		//we've changed 'myhomedisableredirect' to 'userlandingpage' during work on fb#51756
		$preferences[UserPreferencesV2::LANDING_PAGE_PROP_NAME] = array(
			'type' => 'toggle',
			'section' => 'misc/myhome',
			'label-message' => 'tog-userlandingpage',
		);

		return true;
	}
	*/

	/**
	 * Save default view in user preferences (can be either "watchlist" or "activity")
	 *
	 * @author Maciej Brencz <macbre@wikia-inc.com>
	 */
	public static function setDefaultView($defaultView) {
		global $wgUser;

		// correct values
		$values = array('activity', 'watchlist');

		if (in_array($defaultView, $values)) {
			// FIXME / TODO: implemented using wikia-specific stuff
			#$wgUser->setGlobalPreference('myhomedefaultview', $defaultView);
			#$wgUser->saveSettings();

			#$dbw = wfGetDB( DB_MASTER );
			#$dbw->commit(__METHOD__);

			return true;
		}

		return false;
	}

	/**
	 * Get default view from user preferences (can be either "watchlist" or "activity")
	 *
	 * @author Maciej Brencz <macbre@wikia-inc.com>
	 */
	public static function getDefaultView() {
		// FIXME / TODO: replace preference?
		//global $wgUser;
		//$defaultView = $wgUser->getGlobalPreference('myhomedefaultview');
		$defaultView = null;

		if (empty($defaultView)) {
			$defaultView = 'activity';
		}

		return $defaultView;
	}

	public static function getWikiActivitySurrogateKey() {
		// FIXME / TODO: don't have this
		#return Wikia::surrogateKey( 'special-wiki-activity' );
		return false;
	}

	public static function onRevisionInsertComplete() {
		// FIXME / TODO: don't have this
		#Wikia::purgeSurrogateKey( self::getWikiActivitySurrogateKey() );

		return true;
	}

}
